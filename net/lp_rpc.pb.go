// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.12.4
// source: net/lp_rpc.proto

package net

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OSInfo_StorageType int32

const (
	OSInfo_DIRECT OSInfo_StorageType = 0
	OSInfo_S3     OSInfo_StorageType = 1
	OSInfo_GOOGLE OSInfo_StorageType = 2
)

// Enum value maps for OSInfo_StorageType.
var (
	OSInfo_StorageType_name = map[int32]string{
		0: "DIRECT",
		1: "S3",
		2: "GOOGLE",
	}
	OSInfo_StorageType_value = map[string]int32{
		"DIRECT": 0,
		"S3":     1,
		"GOOGLE": 2,
	}
)

func (x OSInfo_StorageType) Enum() *OSInfo_StorageType {
	p := new(OSInfo_StorageType)
	*p = x
	return p
}

func (x OSInfo_StorageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OSInfo_StorageType) Descriptor() protoreflect.EnumDescriptor {
	return file_net_lp_rpc_proto_enumTypes[0].Descriptor()
}

func (OSInfo_StorageType) Type() protoreflect.EnumType {
	return &file_net_lp_rpc_proto_enumTypes[0]
}

func (x OSInfo_StorageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OSInfo_StorageType.Descriptor instead.
func (OSInfo_StorageType) EnumDescriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{4, 0}
}

// Desired output format
type VideoProfile_Format int32

const (
	VideoProfile_MPEGTS VideoProfile_Format = 0
	VideoProfile_MP4    VideoProfile_Format = 1
)

// Enum value maps for VideoProfile_Format.
var (
	VideoProfile_Format_name = map[int32]string{
		0: "MPEGTS",
		1: "MP4",
	}
	VideoProfile_Format_value = map[string]int32{
		"MPEGTS": 0,
		"MP4":    1,
	}
)

func (x VideoProfile_Format) Enum() *VideoProfile_Format {
	p := new(VideoProfile_Format)
	*p = x
	return p
}

func (x VideoProfile_Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoProfile_Format) Descriptor() protoreflect.EnumDescriptor {
	return file_net_lp_rpc_proto_enumTypes[1].Descriptor()
}

func (VideoProfile_Format) Type() protoreflect.EnumType {
	return &file_net_lp_rpc_proto_enumTypes[1]
}

func (x VideoProfile_Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoProfile_Format.Descriptor instead.
func (VideoProfile_Format) EnumDescriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{12, 0}
}

type VideoProfile_Profile int32

const (
	VideoProfile_ENCODER_DEFAULT       VideoProfile_Profile = 0
	VideoProfile_H264_BASELINE         VideoProfile_Profile = 1
	VideoProfile_H264_MAIN             VideoProfile_Profile = 2
	VideoProfile_H264_HIGH             VideoProfile_Profile = 3
	VideoProfile_H264_CONSTRAINED_HIGH VideoProfile_Profile = 4
)

// Enum value maps for VideoProfile_Profile.
var (
	VideoProfile_Profile_name = map[int32]string{
		0: "ENCODER_DEFAULT",
		1: "H264_BASELINE",
		2: "H264_MAIN",
		3: "H264_HIGH",
		4: "H264_CONSTRAINED_HIGH",
	}
	VideoProfile_Profile_value = map[string]int32{
		"ENCODER_DEFAULT":       0,
		"H264_BASELINE":         1,
		"H264_MAIN":             2,
		"H264_HIGH":             3,
		"H264_CONSTRAINED_HIGH": 4,
	}
)

func (x VideoProfile_Profile) Enum() *VideoProfile_Profile {
	p := new(VideoProfile_Profile)
	*p = x
	return p
}

func (x VideoProfile_Profile) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoProfile_Profile) Descriptor() protoreflect.EnumDescriptor {
	return file_net_lp_rpc_proto_enumTypes[2].Descriptor()
}

func (VideoProfile_Profile) Type() protoreflect.EnumType {
	return &file_net_lp_rpc_proto_enumTypes[2]
}

func (x VideoProfile_Profile) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoProfile_Profile.Descriptor instead.
func (VideoProfile_Profile) EnumDescriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{12, 1}
}

type VideoProfile_VideoCodec int32

const (
	VideoProfile_H264 VideoProfile_VideoCodec = 0
	VideoProfile_H265 VideoProfile_VideoCodec = 1
	VideoProfile_VP8  VideoProfile_VideoCodec = 2
	VideoProfile_VP9  VideoProfile_VideoCodec = 3
)

// Enum value maps for VideoProfile_VideoCodec.
var (
	VideoProfile_VideoCodec_name = map[int32]string{
		0: "H264",
		1: "H265",
		2: "VP8",
		3: "VP9",
	}
	VideoProfile_VideoCodec_value = map[string]int32{
		"H264": 0,
		"H265": 1,
		"VP8":  2,
		"VP9":  3,
	}
)

func (x VideoProfile_VideoCodec) Enum() *VideoProfile_VideoCodec {
	p := new(VideoProfile_VideoCodec)
	*p = x
	return p
}

func (x VideoProfile_VideoCodec) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoProfile_VideoCodec) Descriptor() protoreflect.EnumDescriptor {
	return file_net_lp_rpc_proto_enumTypes[3].Descriptor()
}

func (VideoProfile_VideoCodec) Type() protoreflect.EnumType {
	return &file_net_lp_rpc_proto_enumTypes[3]
}

func (x VideoProfile_VideoCodec) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoProfile_VideoCodec.Descriptor instead.
func (VideoProfile_VideoCodec) EnumDescriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{12, 2}
}

type VideoProfile_ChromaSubsampling int32

const (
	VideoProfile_CHROMA_420 VideoProfile_ChromaSubsampling = 0
	VideoProfile_CHROMA_422 VideoProfile_ChromaSubsampling = 1
	VideoProfile_CHROMA_444 VideoProfile_ChromaSubsampling = 2
)

// Enum value maps for VideoProfile_ChromaSubsampling.
var (
	VideoProfile_ChromaSubsampling_name = map[int32]string{
		0: "CHROMA_420",
		1: "CHROMA_422",
		2: "CHROMA_444",
	}
	VideoProfile_ChromaSubsampling_value = map[string]int32{
		"CHROMA_420": 0,
		"CHROMA_422": 1,
		"CHROMA_444": 2,
	}
)

func (x VideoProfile_ChromaSubsampling) Enum() *VideoProfile_ChromaSubsampling {
	p := new(VideoProfile_ChromaSubsampling)
	*p = x
	return p
}

func (x VideoProfile_ChromaSubsampling) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoProfile_ChromaSubsampling) Descriptor() protoreflect.EnumDescriptor {
	return file_net_lp_rpc_proto_enumTypes[4].Descriptor()
}

func (VideoProfile_ChromaSubsampling) Type() protoreflect.EnumType {
	return &file_net_lp_rpc_proto_enumTypes[4]
}

func (x VideoProfile_ChromaSubsampling) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoProfile_ChromaSubsampling.Descriptor instead.
func (VideoProfile_ChromaSubsampling) EnumDescriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{12, 3}
}

type PingPong struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Implementation defined
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PingPong) Reset() {
	*x = PingPong{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_lp_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingPong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingPong) ProtoMessage() {}

func (x *PingPong) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingPong.ProtoReflect.Descriptor instead.
func (*PingPong) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *PingPong) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// sent by Broadcaster to Orchestrator to terminate the transcoding session and free resources (used for verification sessions)
type EndTranscodingSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data for transcoding authentication
	AuthToken *AuthToken `protobuf:"bytes,1,opt,name=auth_token,json=authToken,proto3" json:"auth_token,omitempty"`
}

func (x *EndTranscodingSessionRequest) Reset() {
	*x = EndTranscodingSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_lp_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndTranscodingSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndTranscodingSessionRequest) ProtoMessage() {}

func (x *EndTranscodingSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndTranscodingSessionRequest.ProtoReflect.Descriptor instead.
func (*EndTranscodingSessionRequest) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *EndTranscodingSessionRequest) GetAuthToken() *AuthToken {
	if x != nil {
		return x.AuthToken
	}
	return nil
}

type EndTranscodingSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EndTranscodingSessionResponse) Reset() {
	*x = EndTranscodingSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_lp_rpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndTranscodingSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndTranscodingSessionResponse) ProtoMessage() {}

func (x *EndTranscodingSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndTranscodingSessionResponse.ProtoReflect.Descriptor instead.
func (*EndTranscodingSessionResponse) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{2}
}

// This request is sent by the broadcaster in `GetTranscoder` to request
// information on which transcoder to use.
type OrchestratorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ethereum address of the broadcaster
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Broadcaster's signature over its address
	Sig []byte `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
	// Features and constraints required by the broadcaster
	Capabilities *Capabilities `protobuf:"bytes,3,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
}

func (x *OrchestratorRequest) Reset() {
	*x = OrchestratorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_lp_rpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrchestratorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrchestratorRequest) ProtoMessage() {}

func (x *OrchestratorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrchestratorRequest.ProtoReflect.Descriptor instead.
func (*OrchestratorRequest) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{3}
}

func (x *OrchestratorRequest) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *OrchestratorRequest) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

func (x *OrchestratorRequest) GetCapabilities() *Capabilities {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

// OSInfo needed to negotiate storages that will be used.
// It carries info needed to write to the storage.
type OSInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Storage type: direct, s3, ipfs.
	StorageType OSInfo_StorageType `protobuf:"varint,1,opt,name=storageType,proto3,enum=net.OSInfo_StorageType" json:"storageType,omitempty"`
	S3Info      *S3OSInfo          `protobuf:"bytes,16,opt,name=s3info,proto3" json:"s3info,omitempty"`
}

func (x *OSInfo) Reset() {
	*x = OSInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_lp_rpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OSInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OSInfo) ProtoMessage() {}

func (x *OSInfo) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OSInfo.ProtoReflect.Descriptor instead.
func (*OSInfo) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{4}
}

func (x *OSInfo) GetStorageType() OSInfo_StorageType {
	if x != nil {
		return x.StorageType
	}
	return OSInfo_DIRECT
}

func (x *OSInfo) GetS3Info() *S3OSInfo {
	if x != nil {
		return x.S3Info
	}
	return nil
}

type S3OSInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Host to use to connect to S3
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Key (prefix) to use when uploading the object.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// POST policy that S3 owner node creates to give write access to other node.
	Policy string `protobuf:"bytes,3,opt,name=policy,proto3" json:"policy,omitempty"`
	// Signature for POST policy.
	Signature string `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	// Needed for POST policy.
	Credential string `protobuf:"bytes,5,opt,name=credential,proto3" json:"credential,omitempty"`
	// Needed for POST policy.
	XAmzDate string `protobuf:"bytes,6,opt,name=xAmzDate,proto3" json:"xAmzDate,omitempty"`
}

func (x *S3OSInfo) Reset() {
	*x = S3OSInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_lp_rpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3OSInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3OSInfo) ProtoMessage() {}

func (x *S3OSInfo) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3OSInfo.ProtoReflect.Descriptor instead.
func (*S3OSInfo) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{5}
}

func (x *S3OSInfo) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *S3OSInfo) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *S3OSInfo) GetPolicy() string {
	if x != nil {
		return x.Policy
	}
	return ""
}

func (x *S3OSInfo) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *S3OSInfo) GetCredential() string {
	if x != nil {
		return x.Credential
	}
	return ""
}

func (x *S3OSInfo) GetXAmzDate() string {
	if x != nil {
		return x.XAmzDate
	}
	return ""
}

// PriceInfo conveys pricing info for transcoding services
type PriceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// price in wei
	PricePerUnit int64 `protobuf:"varint,1,opt,name=pricePerUnit,proto3" json:"pricePerUnit,omitempty"`
	// Pixels covered in the price
	// Set price to 1 wei and pixelsPerUnit > 1 to have a smaller price granularity per pixel than 1 wei
	PixelsPerUnit int64 `protobuf:"varint,2,opt,name=pixelsPerUnit,proto3" json:"pixelsPerUnit,omitempty"`
}

func (x *PriceInfo) Reset() {
	*x = PriceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_lp_rpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceInfo) ProtoMessage() {}

func (x *PriceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceInfo.ProtoReflect.Descriptor instead.
func (*PriceInfo) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{6}
}

func (x *PriceInfo) GetPricePerUnit() int64 {
	if x != nil {
		return x.PricePerUnit
	}
	return 0
}

func (x *PriceInfo) GetPixelsPerUnit() int64 {
	if x != nil {
		return x.PixelsPerUnit
	}
	return 0
}

type Capabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bit string of supported features - one bit per feature
	Bitstring []uint64 `protobuf:"varint,1,rep,packed,name=bitstring,proto3" json:"bitstring,omitempty"`
	// Bit string of features that are required to be supported
	Mandatories []uint64 `protobuf:"varint,2,rep,packed,name=mandatories,proto3" json:"mandatories,omitempty"`
	// Capacity corresponding to each capability
	Capacities  map[uint32]uint32         `protobuf:"bytes,3,rep,name=capacities,proto3" json:"capacities,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Version     string                    `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Constraints *Capabilities_Constraints `protobuf:"bytes,5,opt,name=constraints,proto3" json:"constraints,omitempty"`
}

func (x *Capabilities) Reset() {
	*x = Capabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_lp_rpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Capabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Capabilities) ProtoMessage() {}

func (x *Capabilities) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Capabilities.ProtoReflect.Descriptor instead.
func (*Capabilities) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{7}
}

func (x *Capabilities) GetBitstring() []uint64 {
	if x != nil {
		return x.Bitstring
	}
	return nil
}

func (x *Capabilities) GetMandatories() []uint64 {
	if x != nil {
		return x.Mandatories
	}
	return nil
}

func (x *Capabilities) GetCapacities() map[uint32]uint32 {
	if x != nil {
		return x.Capacities
	}
	return nil
}

func (x *Capabilities) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Capabilities) GetConstraints() *Capabilities_Constraints {
	if x != nil {
		return x.Constraints
	}
	return nil
}

// The orchestrator sends this in response to `GetOrchestrator`, containing
// miscellaneous data related to the job.
type OrchestratorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URI of the transcoder to use for submitting segments.
	Transcoder string `protobuf:"bytes,1,opt,name=transcoder,proto3" json:"transcoder,omitempty"`
	// Parameters for probabilistic micropayment tickets
	TicketParams *TicketParams `protobuf:"bytes,2,opt,name=ticket_params,json=ticketParams,proto3" json:"ticket_params,omitempty"`
	// Price Info containing the price per pixel to transcode
	PriceInfo *PriceInfo `protobuf:"bytes,3,opt,name=price_info,json=priceInfo,proto3" json:"price_info,omitempty"`
	// ETH address that should sign transcoded results
	Address []byte `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	// Features and constraints supported by the orchestrator
	Capabilities *Capabilities `protobuf:"bytes,5,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
	// Data for transcoding authentication
	AuthToken *AuthToken `protobuf:"bytes,6,opt,name=auth_token,json=authToken,proto3" json:"auth_token,omitempty"`
	// Orchestrator returns info about own input object storage, if it wants it to be used.
	Storage []*OSInfo `protobuf:"bytes,32,rep,name=storage,proto3" json:"storage,omitempty"`
}

func (x *OrchestratorInfo) Reset() {
	*x = OrchestratorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_lp_rpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrchestratorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrchestratorInfo) ProtoMessage() {}

func (x *OrchestratorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrchestratorInfo.ProtoReflect.Descriptor instead.
func (*OrchestratorInfo) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{8}
}

func (x *OrchestratorInfo) GetTranscoder() string {
	if x != nil {
		return x.Transcoder
	}
	return ""
}

func (x *OrchestratorInfo) GetTicketParams() *TicketParams {
	if x != nil {
		return x.TicketParams
	}
	return nil
}

func (x *OrchestratorInfo) GetPriceInfo() *PriceInfo {
	if x != nil {
		return x.PriceInfo
	}
	return nil
}

func (x *OrchestratorInfo) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *OrchestratorInfo) GetCapabilities() *Capabilities {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *OrchestratorInfo) GetAuthToken() *AuthToken {
	if x != nil {
		return x.AuthToken
	}
	return nil
}

func (x *OrchestratorInfo) GetStorage() []*OSInfo {
	if x != nil {
		return x.Storage
	}
	return nil
}

// Data for transcoding authentication that is included in the OrchestratorInfo message during discovery
type AuthToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Record used to authenticate for a transcode session
	// Opaque to the receiver
	Token []byte `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// ID of the transcode session that the token is authenticating for
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Timestamp when the token expires
	Expiration int64 `protobuf:"varint,3,opt,name=expiration,proto3" json:"expiration,omitempty"`
}

func (x *AuthToken) Reset() {
	*x = AuthToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_lp_rpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthToken) ProtoMessage() {}

func (x *AuthToken) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthToken.ProtoReflect.Descriptor instead.
func (*AuthToken) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{9}
}

func (x *AuthToken) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *AuthToken) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *AuthToken) GetExpiration() int64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

// Data included by the broadcaster when submitting a segment for transcoding.
type SegData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Manifest ID this segment belongs to
	ManifestId []byte `protobuf:"bytes,1,opt,name=manifestId,proto3" json:"manifestId,omitempty"`
	// Sequence number of the segment to be transcoded
	Seq int64 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	// Hash of the segment data to be transcoded
	Hash []byte `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	// Transcoding profiles to use
	Profiles []byte `protobuf:"bytes,4,opt,name=profiles,proto3" json:"profiles,omitempty"`
	// Broadcaster signature for the segment. Corresponds to:
	// broadcaster.sign(manifestId | seqNo | dataHash | profiles)
	Sig []byte `protobuf:"bytes,5,opt,name=sig,proto3" json:"sig,omitempty"`
	// Duration of the segment to be transcoded, in milliseconds
	Duration int32 `protobuf:"varint,6,opt,name=duration,proto3" json:"duration,omitempty"`
	// Capabilities used by this segment.
	Capabilities *Capabilities `protobuf:"bytes,7,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
	// Data for transcoding authentication
	AuthToken *AuthToken `protobuf:"bytes,8,opt,name=auth_token,json=authToken,proto3" json:"auth_token,omitempty"`
	// Calculate perceptual hash for this segment
	CalcPerceptualHash bool `protobuf:"varint,10,opt,name=calc_perceptual_hash,json=calcPerceptualHash,proto3" json:"calc_perceptual_hash,omitempty"`
	// Broadcaster's preferred storage medium(s)
	// XXX should we include this in a sig somewhere until certs are authenticated?
	Storage []*OSInfo `protobuf:"bytes,32,rep,name=storage,proto3" json:"storage,omitempty"`
	// Transcoding profiles to use. Supersedes `profiles` field
	// Deprecated by `fullProfiles2` but may still be used for mpegts formats
	FullProfiles []*VideoProfile `protobuf:"bytes,33,rep,name=fullProfiles,proto3" json:"fullProfiles,omitempty"`
	// Transcoding profiles to use. Supersedes `fullProfiles` field
	// Deprecated by `fullProfiles3` but may still be used for integer FPS
	FullProfiles2 []*VideoProfile `protobuf:"bytes,34,rep,name=fullProfiles2,proto3" json:"fullProfiles2,omitempty"`
	// Transcoding profiles to use. Supersedes `fullProfiles2` field
	FullProfiles3 []*VideoProfile `protobuf:"bytes,35,rep,name=fullProfiles3,proto3" json:"fullProfiles3,omitempty"`
	// Transcoding parameters specific to this segment
	SegmentParameters *SegParameters `protobuf:"bytes,37,opt,name=segment_parameters,json=segmentParameters,proto3" json:"segment_parameters,omitempty"`
	// Force HW Session Reinit
	ForceSessionReinit bool `protobuf:"varint,38,opt,name=ForceSessionReinit,proto3" json:"ForceSessionReinit,omitempty"`
}

func (x *SegData) Reset() {
	*x = SegData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_lp_rpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegData) ProtoMessage() {}

func (x *SegData) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegData.ProtoReflect.Descriptor instead.
func (*SegData) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{10}
}

func (x *SegData) GetManifestId() []byte {
	if x != nil {
		return x.ManifestId
	}
	return nil
}

func (x *SegData) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *SegData) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *SegData) GetProfiles() []byte {
	if x != nil {
		return x.Profiles
	}
	return nil
}

func (x *SegData) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

func (x *SegData) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *SegData) GetCapabilities() *Capabilities {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *SegData) GetAuthToken() *AuthToken {
	if x != nil {
		return x.AuthToken
	}
	return nil
}

func (x *SegData) GetCalcPerceptualHash() bool {
	if x != nil {
		return x.CalcPerceptualHash
	}
	return false
}

func (x *SegData) GetStorage() []*OSInfo {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *SegData) GetFullProfiles() []*VideoProfile {
	if x != nil {
		return x.FullProfiles
	}
	return nil
}

func (x *SegData) GetFullProfiles2() []*VideoProfile {
	if x != nil {
		return x.FullProfiles2
	}
	return nil
}

func (x *SegData) GetFullProfiles3() []*VideoProfile {
	if x != nil {
		return x.FullProfiles3
	}
	return nil
}

func (x *SegData) GetSegmentParameters() *SegParameters {
	if x != nil {
		return x.SegmentParameters
	}
	return nil
}

func (x *SegData) GetForceSessionReinit() bool {
	if x != nil {
		return x.ForceSessionReinit
	}
	return false
}

type SegParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Start timestamp from which to start encoding
	// Milliseconds, from start of the file
	From uint64 `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	// Skip all frames after that timestamp
	// Milliseconds, from start of the file
	To uint64 `protobuf:"varint,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *SegParameters) Reset() {
	*x = SegParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_lp_rpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegParameters) ProtoMessage() {}

func (x *SegParameters) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegParameters.ProtoReflect.Descriptor instead.
func (*SegParameters) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{11}
}

func (x *SegParameters) GetFrom() uint64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *SegParameters) GetTo() uint64 {
	if x != nil {
		return x.To
	}
	return 0
}

type VideoProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of VideoProfile
	Name string `protobuf:"bytes,16,opt,name=name,proto3" json:"name,omitempty"`
	// Width of VideoProfile
	Width int32 `protobuf:"varint,17,opt,name=width,proto3" json:"width,omitempty"`
	// Height of VideoProfile
	Height int32 `protobuf:"varint,18,opt,name=height,proto3" json:"height,omitempty"`
	// Bitrate of VideoProfile
	Bitrate int32 `protobuf:"varint,19,opt,name=bitrate,proto3" json:"bitrate,omitempty"`
	// FPS of VideoProfile
	Fps    uint32              `protobuf:"varint,20,opt,name=fps,proto3" json:"fps,omitempty"`
	Format VideoProfile_Format `protobuf:"varint,21,opt,name=format,proto3,enum=net.VideoProfile_Format" json:"format,omitempty"`
	// FPS Denominator of VideoProfile
	FpsDen uint32 `protobuf:"varint,22,opt,name=fpsDen,proto3" json:"fpsDen,omitempty"`
	// Desired codec profile
	Profile VideoProfile_Profile `protobuf:"varint,23,opt,name=profile,proto3,enum=net.VideoProfile_Profile" json:"profile,omitempty"`
	// GOP interval
	Gop int32 `protobuf:"varint,24,opt,name=gop,proto3" json:"gop,omitempty"`
	// Encoder (video codec)
	Encoder      VideoProfile_VideoCodec        `protobuf:"varint,25,opt,name=encoder,proto3,enum=net.VideoProfile_VideoCodec" json:"encoder,omitempty"`
	ColorDepth   int32                          `protobuf:"varint,26,opt,name=colorDepth,proto3" json:"colorDepth,omitempty"`
	ChromaFormat VideoProfile_ChromaSubsampling `protobuf:"varint,27,opt,name=chromaFormat,proto3,enum=net.VideoProfile_ChromaSubsampling" json:"chromaFormat,omitempty"`
	Quality      uint32                         `protobuf:"varint,28,opt,name=quality,proto3" json:"quality,omitempty"`
}

func (x *VideoProfile) Reset() {
	*x = VideoProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_lp_rpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoProfile) ProtoMessage() {}

func (x *VideoProfile) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoProfile.ProtoReflect.Descriptor instead.
func (*VideoProfile) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{12}
}

func (x *VideoProfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VideoProfile) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *VideoProfile) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *VideoProfile) GetBitrate() int32 {
	if x != nil {
		return x.Bitrate
	}
	return 0
}

func (x *VideoProfile) GetFps() uint32 {
	if x != nil {
		return x.Fps
	}
	return 0
}

func (x *VideoProfile) GetFormat() VideoProfile_Format {
	if x != nil {
		return x.Format
	}
	return VideoProfile_MPEGTS
}

func (x *VideoProfile) GetFpsDen() uint32 {
	if x != nil {
		return x.FpsDen
	}
	return 0
}

func (x *VideoProfile) GetProfile() VideoProfile_Profile {
	if x != nil {
		return x.Profile
	}
	return VideoProfile_ENCODER_DEFAULT
}

func (x *VideoProfile) GetGop() int32 {
	if x != nil {
		return x.Gop
	}
	return 0
}

func (x *VideoProfile) GetEncoder() VideoProfile_VideoCodec {
	if x != nil {
		return x.Encoder
	}
	return VideoProfile_H264
}

func (x *VideoProfile) GetColorDepth() int32 {
	if x != nil {
		return x.ColorDepth
	}
	return 0
}

func (x *VideoProfile) GetChromaFormat() VideoProfile_ChromaSubsampling {
	if x != nil {
		return x.ChromaFormat
	}
	return VideoProfile_CHROMA_420
}

func (x *VideoProfile) GetQuality() uint32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

// Individual transcoded segment data.
type TranscodedSegmentData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URL where the transcoded data can be downloaded from.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Amount of pixels processed (output pixels)
	Pixels int64 `protobuf:"varint,2,opt,name=pixels,proto3" json:"pixels,omitempty"`
	// URL where the perceptual hash data can be downloaded from (can be empty)
	PerceptualHashUrl string `protobuf:"bytes,3,opt,name=perceptual_hash_url,json=perceptualHashUrl,proto3" json:"perceptual_hash_url,omitempty"`
}

func (x *TranscodedSegmentData) Reset() {
	*x = TranscodedSegmentData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_lp_rpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscodedSegmentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscodedSegmentData) ProtoMessage() {}

func (x *TranscodedSegmentData) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscodedSegmentData.ProtoReflect.Descriptor instead.
func (*TranscodedSegmentData) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{13}
}

func (x *TranscodedSegmentData) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *TranscodedSegmentData) GetPixels() int64 {
	if x != nil {
		return x.Pixels
	}
	return 0
}

func (x *TranscodedSegmentData) GetPerceptualHashUrl() string {
	if x != nil {
		return x.PerceptualHashUrl
	}
	return ""
}

// A set of transcoded segments following the profiles specified in the job.
type TranscodeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transcoded data, in the order specified in the job options
	Segments []*TranscodedSegmentData `protobuf:"bytes,1,rep,name=segments,proto3" json:"segments,omitempty"`
	// Signature of the hash of the concatenated hashes
	Sig []byte `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
}

func (x *TranscodeData) Reset() {
	*x = TranscodeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_lp_rpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscodeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscodeData) ProtoMessage() {}

func (x *TranscodeData) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscodeData.ProtoReflect.Descriptor instead.
func (*TranscodeData) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{14}
}

func (x *TranscodeData) GetSegments() []*TranscodedSegmentData {
	if x != nil {
		return x.Segments
	}
	return nil
}

func (x *TranscodeData) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

// Response that a transcoder sends after transcoding a segment.
type TranscodeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sequence number of the transcoded results.
	Seq int64 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	// Result of transcoding can be an error, or successful with more info
	//
	// Types that are assignable to Result:
	//
	//	*TranscodeResult_Error
	//	*TranscodeResult_Data
	Result isTranscodeResult_Result `protobuf_oneof:"result"`
	// Used to notify a broadcaster of updated orchestrator information
	Info *OrchestratorInfo `protobuf:"bytes,16,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *TranscodeResult) Reset() {
	*x = TranscodeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_lp_rpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscodeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscodeResult) ProtoMessage() {}

func (x *TranscodeResult) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscodeResult.ProtoReflect.Descriptor instead.
func (*TranscodeResult) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{15}
}

func (x *TranscodeResult) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (m *TranscodeResult) GetResult() isTranscodeResult_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *TranscodeResult) GetError() string {
	if x, ok := x.GetResult().(*TranscodeResult_Error); ok {
		return x.Error
	}
	return ""
}

func (x *TranscodeResult) GetData() *TranscodeData {
	if x, ok := x.GetResult().(*TranscodeResult_Data); ok {
		return x.Data
	}
	return nil
}

func (x *TranscodeResult) GetInfo() *OrchestratorInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type isTranscodeResult_Result interface {
	isTranscodeResult_Result()
}

type TranscodeResult_Error struct {
	Error string `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

type TranscodeResult_Data struct {
	Data *TranscodeData `protobuf:"bytes,3,opt,name=data,proto3,oneof"`
}

func (*TranscodeResult_Error) isTranscodeResult_Result() {}

func (*TranscodeResult_Data) isTranscodeResult_Result() {}

// Sent by the transcoder to register itself to the orchestrator.
type RegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Shared secret for auth
	Secret string `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret,omitempty"`
	// Transcoder capacity
	Capacity int64 `protobuf:"varint,2,opt,name=capacity,proto3" json:"capacity,omitempty"`
	// Transcoder capabilities
	Capabilities *Capabilities `protobuf:"bytes,3,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_lp_rpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{16}
}

func (x *RegisterRequest) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *RegisterRequest) GetCapacity() int64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *RegisterRequest) GetCapabilities() *Capabilities {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

// Sent by the orchestrator to the transcoder
type NotifySegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URL of the segment to transcode.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Configuration for the transcoding job
	SegData *SegData `protobuf:"bytes,3,opt,name=segData,proto3" json:"segData,omitempty"`
	// ID for this particular transcoding task.
	TaskId int64 `protobuf:"varint,16,opt,name=taskId,proto3" json:"taskId,omitempty"`
	// Orchestrator identifier for segment metadata
	OrchId string `protobuf:"bytes,18,opt,name=orchId,proto3" json:"orchId,omitempty"`
	// Deprecated by fullProfiles. Set of presets to transcode into.
	// Should be set to an invalid value to induce failures
	Profiles []byte `protobuf:"bytes,17,opt,name=profiles,proto3" json:"profiles,omitempty"`
}

func (x *NotifySegment) Reset() {
	*x = NotifySegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_lp_rpc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifySegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifySegment) ProtoMessage() {}

func (x *NotifySegment) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifySegment.ProtoReflect.Descriptor instead.
func (*NotifySegment) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{17}
}

func (x *NotifySegment) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *NotifySegment) GetSegData() *SegData {
	if x != nil {
		return x.SegData
	}
	return nil
}

func (x *NotifySegment) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *NotifySegment) GetProfiles() []byte {
	if x != nil {
		return x.Profiles
	}
	return nil
}

// Sent by the aiworker to register itself to the orchestrator.
type RegisterAIWorkerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Shared secret for auth
	Secret string `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret,omitempty"`
	// AIWorker capacity
	Capacity int64 `protobuf:"varint,2,opt,name=capacity,proto3" json:"capacity,omitempty"`
	// AIWorker capabilities
	Capabilities *Capabilities `protobuf:"bytes,3,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
}

func (x *RegisterAIWorkerRequest) Reset() {
	*x = RegisterAIWorkerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_lp_rpc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterAIWorkerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterAIWorkerRequest) ProtoMessage() {}

func (x *RegisterAIWorkerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterAIWorkerRequest.ProtoReflect.Descriptor instead.
func (*RegisterAIWorkerRequest) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{18}
}

func (x *RegisterAIWorkerRequest) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *RegisterAIWorkerRequest) GetCapacity() int64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *RegisterAIWorkerRequest) GetCapabilities() *Capabilities {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

// Sent by the orchestrator to the aiworker
type NotifyAIJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URL of the input to use.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// pipeline to use for the job
	Pipeline string `protobuf:"bytes,2,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	// model to process job with
	ModelID string `protobuf:"bytes,3,opt,name=modelID,proto3" json:"modelID,omitempty"`
	// Configuration for the AI job
	RequestData []byte `protobuf:"bytes,4,opt,name=requestData,proto3" json:"requestData,omitempty"`
	// ID for this particular AI task.
	TaskId int64 `protobuf:"varint,5,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *NotifyAIJob) Reset() {
	*x = NotifyAIJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_lp_rpc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyAIJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (m *NotifySegment) GetOrchId() string {
	if m != nil {
		return m.OrchId
	}
	return ""
}

func (*NotifyAIJob) ProtoMessage() {}

func (x *NotifyAIJob) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyAIJob.ProtoReflect.Descriptor instead.
func (*NotifyAIJob) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{19}
}

func (x *NotifyAIJob) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *NotifyAIJob) GetPipeline() string {
	if x != nil {
		return x.Pipeline
	}
	return ""
}

func (x *NotifyAIJob) GetModelID() string {
	if x != nil {
		return x.ModelID
	}
	return ""
}

func (x *NotifyAIJob) GetRequestData() []byte {
	if x != nil {
		return x.RequestData
	}
	return nil
}

func (x *NotifyAIJob) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

// Required parameters for probabilistic micropayment tickets
type TicketParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ETH address of the recipient
	Recipient []byte `protobuf:"bytes,1,opt,name=recipient,proto3" json:"recipient,omitempty"`
	// Pay out (in Wei) to the recipient if the ticket wins
	FaceValue []byte `protobuf:"bytes,2,opt,name=face_value,json=faceValue,proto3" json:"face_value,omitempty"`
	// Probability that the ticket wins
	WinProb []byte `protobuf:"bytes,3,opt,name=win_prob,json=winProb,proto3" json:"win_prob,omitempty"`
	// 32 byte keccak-256 hash commitment to a random number provided
	// by the recipient
	RecipientRandHash []byte `protobuf:"bytes,4,opt,name=recipient_rand_hash,json=recipientRandHash,proto3" json:"recipient_rand_hash,omitempty"`
	// Value generated by recipient that the recipient can use
	// to derive the random number corresponding to the recipient's hash commitment
	Seed []byte `protobuf:"bytes,5,opt,name=seed,proto3" json:"seed,omitempty"`
	// Block number at which the current set of advertised TicketParams is no longer valid
	ExpirationBlock []byte `protobuf:"bytes,6,opt,name=expiration_block,json=expirationBlock,proto3" json:"expiration_block,omitempty"`
	// Expected ticket expiration params
	ExpirationParams *TicketExpirationParams `protobuf:"bytes,7,opt,name=expiration_params,json=expirationParams,proto3" json:"expiration_params,omitempty"`
}

func (x *TicketParams) Reset() {
	*x = TicketParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_lp_rpc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketParams) ProtoMessage() {}

func (x *TicketParams) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketParams.ProtoReflect.Descriptor instead.
func (*TicketParams) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{20}
}

func (x *TicketParams) GetRecipient() []byte {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *TicketParams) GetFaceValue() []byte {
	if x != nil {
		return x.FaceValue
	}
	return nil
}

func (x *TicketParams) GetWinProb() []byte {
	if x != nil {
		return x.WinProb
	}
	return nil
}

func (x *TicketParams) GetRecipientRandHash() []byte {
	if x != nil {
		return x.RecipientRandHash
	}
	return nil
}

func (x *TicketParams) GetSeed() []byte {
	if x != nil {
		return x.Seed
	}
	return nil
}

func (x *TicketParams) GetExpirationBlock() []byte {
	if x != nil {
		return x.ExpirationBlock
	}
	return nil
}

func (x *TicketParams) GetExpirationParams() *TicketExpirationParams {
	if x != nil {
		return x.ExpirationParams
	}
	return nil
}

// Sender Params (nonces and signatures)
type TicketSenderParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Monotonically increasing counter that makes the ticket
	// unique relative to a particular hash commitment to a recipient's random number
	SenderNonce uint32 `protobuf:"varint,1,opt,name=sender_nonce,json=senderNonce,proto3" json:"sender_nonce,omitempty"`
	// Sender signature over the ticket
	Sig []byte `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
}

func (x *TicketSenderParams) Reset() {
	*x = TicketSenderParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_lp_rpc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketSenderParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketSenderParams) ProtoMessage() {}

func (x *TicketSenderParams) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketSenderParams.ProtoReflect.Descriptor instead.
func (*TicketSenderParams) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{21}
}

func (x *TicketSenderParams) GetSenderNonce() uint32 {
	if x != nil {
		return x.SenderNonce
	}
	return 0
}

func (x *TicketSenderParams) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

// Ticket params for expiration related validation
type TicketExpirationParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Round during which tickets are created
	CreationRound int64 `protobuf:"varint,1,opt,name=creation_round,json=creationRound,proto3" json:"creation_round,omitempty"`
	// Block hash associated with creation_round
	CreationRoundBlockHash []byte `protobuf:"bytes,2,opt,name=creation_round_block_hash,json=creationRoundBlockHash,proto3" json:"creation_round_block_hash,omitempty"`
}

func (x *TicketExpirationParams) Reset() {
	*x = TicketExpirationParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_lp_rpc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketExpirationParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketExpirationParams) ProtoMessage() {}

func (x *TicketExpirationParams) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketExpirationParams.ProtoReflect.Descriptor instead.
func (*TicketExpirationParams) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{22}
}

func (x *TicketExpirationParams) GetCreationRound() int64 {
	if x != nil {
		return x.CreationRound
	}
	return 0
}

func (x *TicketExpirationParams) GetCreationRoundBlockHash() []byte {
	if x != nil {
		return x.CreationRoundBlockHash
	}
	return nil
}

// Payment for transcoding video segments
// A payment can constitute of multiple tickets
// A broadcaster might need to send multiple tickets to top up his credit with an Orchestrator
type Payment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Probabilistic micropayment ticket parameters
	// These remain the same even when sending multiple tickets
	TicketParams *TicketParams `protobuf:"bytes,1,opt,name=ticket_params,json=ticketParams,proto3" json:"ticket_params,omitempty"`
	// ETH address of the sender
	Sender []byte `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	// Ticket params for expiration related validation
	ExpirationParams   *TicketExpirationParams `protobuf:"bytes,3,opt,name=expiration_params,json=expirationParams,proto3" json:"expiration_params,omitempty"`
	TicketSenderParams []*TicketSenderParams   `protobuf:"bytes,4,rep,name=ticket_sender_params,json=ticketSenderParams,proto3" json:"ticket_sender_params,omitempty"`
	// O's last known price
	ExpectedPrice *PriceInfo `protobuf:"bytes,5,opt,name=expected_price,json=expectedPrice,proto3" json:"expected_price,omitempty"`
}

func (x *Payment) Reset() {
	*x = Payment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_lp_rpc_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Payment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payment) ProtoMessage() {}

func (x *Payment) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payment.ProtoReflect.Descriptor instead.
func (*Payment) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{23}
}

func (x *Payment) GetTicketParams() *TicketParams {
	if x != nil {
		return x.TicketParams
	}
	return nil
}

func (x *Payment) GetSender() []byte {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *Payment) GetExpirationParams() *TicketExpirationParams {
	if x != nil {
		return x.ExpirationParams
	}
	return nil
}

func (x *Payment) GetTicketSenderParams() []*TicketSenderParams {
	if x != nil {
		return x.TicketSenderParams
	}
	return nil
}

func (x *Payment) GetExpectedPrice() *PriceInfo {
	if x != nil {
		return x.ExpectedPrice
	}
	return nil
}

// Non-binary constraints.
type Capabilities_Constraints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinVersion    string                                         `protobuf:"bytes,1,opt,name=minVersion,proto3" json:"minVersion,omitempty"`
	PerCapability map[uint32]*Capabilities_CapabilityConstraints `protobuf:"bytes,2,rep,name=PerCapability,proto3" json:"PerCapability,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Capabilities_Constraints) Reset() {
	*x = Capabilities_Constraints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_lp_rpc_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Capabilities_Constraints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Capabilities_Constraints) ProtoMessage() {}

func (x *Capabilities_Constraints) ProtoReflect() protoreflect.Message {
	mi := &file_net_lp_rpc_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Capabilities_Constraints.ProtoReflect.Descriptor instead.
func (*Capabilities_Constraints) Descriptor() ([]byte, []int) {
	return file_net_lp_rpc_proto_rawDescGZIP(), []int{7, 1}
}

func (x *Capabilities_Constraints) GetMinVersion() string {
	if x != nil {
		return x.MinVersion
	}
	return ""
}

func (x *Capabilities_Constraints) GetPerCapability() map[uint32]*Capabilities_CapabilityConstraints {
	if x != nil {
		return x.PerCapability
	}
	return nil
}

func init() {
	proto.RegisterEnum("net.OSInfo_StorageType", OSInfo_StorageType_name, OSInfo_StorageType_value)
	proto.RegisterEnum("net.VideoProfile_Format", VideoProfile_Format_name, VideoProfile_Format_value)
	proto.RegisterEnum("net.VideoProfile_Profile", VideoProfile_Profile_name, VideoProfile_Profile_value)
	proto.RegisterEnum("net.VideoProfile_VideoCodec", VideoProfile_VideoCodec_name, VideoProfile_VideoCodec_value)
	proto.RegisterEnum("net.VideoProfile_ChromaSubsampling", VideoProfile_ChromaSubsampling_name, VideoProfile_ChromaSubsampling_value)
	proto.RegisterType((*PingPong)(nil), "net.PingPong")
	proto.RegisterType((*EndTranscodingSessionRequest)(nil), "net.EndTranscodingSessionRequest")
	proto.RegisterType((*EndTranscodingSessionResponse)(nil), "net.EndTranscodingSessionResponse")
	proto.RegisterType((*OrchestratorRequest)(nil), "net.OrchestratorRequest")
	proto.RegisterType((*OSInfo)(nil), "net.OSInfo")
	proto.RegisterType((*S3OSInfo)(nil), "net.S3OSInfo")
	proto.RegisterType((*PriceInfo)(nil), "net.PriceInfo")
	proto.RegisterType((*Capabilities)(nil), "net.Capabilities")
	proto.RegisterMapType((map[uint32]uint32)(nil), "net.Capabilities.CapacitiesEntry")
	proto.RegisterType((*Capabilities_Constraints)(nil), "net.Capabilities.Constraints")
	proto.RegisterMapType((map[uint32]*Capabilities_CapabilityConstraints)(nil), "net.Capabilities.Constraints.PerCapabilityEntry")
	proto.RegisterType((*Capabilities_CapabilityConstraints)(nil), "net.Capabilities.CapabilityConstraints")
	proto.RegisterMapType((map[string]*Capabilities_CapabilityConstraints_ModelConstraint)(nil), "net.Capabilities.CapabilityConstraints.ModelsEntry")
	proto.RegisterType((*Capabilities_CapabilityConstraints_ModelConstraint)(nil), "net.Capabilities.CapabilityConstraints.ModelConstraint")
	proto.RegisterType((*OrchestratorInfo)(nil), "net.OrchestratorInfo")
	proto.RegisterType((*AuthToken)(nil), "net.AuthToken")
	proto.RegisterType((*SegData)(nil), "net.SegData")
	proto.RegisterType((*SegParameters)(nil), "net.SegParameters")
	proto.RegisterType((*VideoProfile)(nil), "net.VideoProfile")
	proto.RegisterType((*TranscodedSegmentData)(nil), "net.TranscodedSegmentData")
	proto.RegisterType((*TranscodeData)(nil), "net.TranscodeData")
	proto.RegisterType((*TranscodeResult)(nil), "net.TranscodeResult")
	proto.RegisterType((*RegisterRequest)(nil), "net.RegisterRequest")
	proto.RegisterType((*NotifySegment)(nil), "net.NotifySegment")
	proto.RegisterType((*TicketParams)(nil), "net.TicketParams")
	proto.RegisterType((*TicketSenderParams)(nil), "net.TicketSenderParams")
	proto.RegisterType((*TicketExpirationParams)(nil), "net.TicketExpirationParams")
	proto.RegisterType((*Payment)(nil), "net.Payment")
}

func init() {
	proto.RegisterFile("net/lp_rpc.proto", fileDescriptor_034e29c79f9ba827)
}

var fileDescriptor_034e29c79f9ba827 = []byte{
	// 2022 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x58, 0xdd, 0x72, 0xdb, 0xc6,
	0x15, 0x16, 0x7f, 0xc4, 0x9f, 0x43, 0x52, 0x82, 0xd6, 0x96, 0x0c, 0x33, 0x76, 0x6a, 0x23, 0x71,
	0xea, 0x5c, 0x84, 0xf1, 0x50, 0xb2, 0x13, 0x77, 0x26, 0xd3, 0xea, 0x87, 0x96, 0x98, 0x5a, 0x12,
	0x67, 0x29, 0x6b, 0xa6, 0xbd, 0x28, 0x0b, 0x01, 0x4b, 0x12, 0x15, 0x09, 0xc0, 0x8b, 0x65, 0x2c,
	0x65, 0xfa, 0x02, 0x7d, 0x84, 0xf6, 0xa6, 0x9d, 0xce, 0xf4, 0x3d, 0xfa, 0x00, 0x7d, 0x80, 0x3e,
	0x46, 0x2f, 0x7a, 0xdf, 0xce, 0x9e, 0x5d, 0x80, 0x80, 0xc8, 0x38, 0x8a, 0xef, 0xf6, 0xfc, 0xee,
	0xd9, 0xb3, 0x7b, 0xbe, 0x73, 0x00, 0x30, 0x7c, 0x26, 0xbe, 0x9c, 0x84, 0x03, 0x1e, 0x3a, 0xad,
	0x90, 0x07, 0x22, 0x20, 0x05, 0x9f, 0x09, 0xeb, 0x11, 0x54, 0x7a, 0x9e, 0x3f, 0xea, 0x05, 0xfe,
	0x88, 0xdc, 0x85, 0xd5, 0xef, 0xec, 0xc9, 0x8c, 0x99, 0xb9, 0x47, 0xb9, 0xa7, 0x75, 0xaa, 0x08,
	0xeb, 0x18, 0x1e, 0x74, 0x7c, 0xf7, 0x8c, 0xdb, 0x7e, 0xe4, 0x04, 0xae, 0xe7, 0x8f, 0xfa, 0x2c,
	0x8a, 0xbc, 0xc0, 0xa7, 0xec, 0xed, 0x8c, 0x45, 0x82, 0x7c, 0x01, 0x60, 0xcf, 0xc4, 0x78, 0x20,
	0x82, 0x4b, 0xe6, 0xa3, 0x69, 0xad, 0xbd, 0xd6, 0xf2, 0x99, 0x68, 0xed, 0xce, 0xc4, 0xf8, 0x4c,
	0x72, 0x69, 0xd5, 0x8e, 0x97, 0xd6, 0xcf, 0xe0, 0xe1, 0x0f, 0xb8, 0x8b, 0xc2, 0xc0, 0x8f, 0x98,
	0x75, 0x05, 0x77, 0x4e, 0xb9, 0x33, 0x66, 0x91, 0xe0, 0xb6, 0x08, 0x78, 0xbc, 0x8d, 0x09, 0x65,
	0xdb, 0x75, 0x39, 0x8b, 0x22, 0x1d, 0x5e, 0x4c, 0x12, 0x03, 0x0a, 0x91, 0x37, 0x32, 0xf3, 0xc8,
	0x95, 0x4b, 0xf2, 0x1c, 0xea, 0x8e, 0x1d, 0xda, 0x17, 0xde, 0xc4, 0x13, 0x1e, 0x8b, 0xcc, 0x02,
	0x06, 0xb5, 0x81, 0x41, 0xed, 0xa7, 0x04, 0x34, 0xa3, 0x66, 0xfd, 0x39, 0x07, 0xa5, 0xd3, 0x7e,
	0xd7, 0x1f, 0x06, 0xe4, 0x25, 0xd4, 0x22, 0x11, 0x70, 0x7b, 0xc4, 0xce, 0xae, 0x43, 0x95, 0x90,
	0xb5, 0xf6, 0x3d, 0x74, 0xa0, 0x34, 0x5a, 0xfd, 0xb9, 0x98, 0xa6, 0x75, 0xc9, 0x13, 0x28, 0x45,
	0xdb, 0x9e, 0x3f, 0x0c, 0x4c, 0x03, 0xb7, 0x6d, 0xa0, 0x55, 0x7f, 0x5b, 0xd9, 0x51, 0x2d, 0xb4,
	0xbe, 0x80, 0x5a, 0xca, 0x05, 0x01, 0x28, 0x1d, 0x74, 0x69, 0x67, 0xff, 0xcc, 0x58, 0x21, 0x25,
	0xc8, 0xf7, 0xb7, 0x8d, 0x9c, 0xe4, 0x1d, 0x9e, 0x9e, 0x1e, 0xbe, 0xee, 0x18, 0x79, 0xeb, 0xef,
	0x39, 0xa8, 0xc4, 0x3e, 0x08, 0x81, 0xe2, 0x38, 0x88, 0x04, 0x86, 0x55, 0xa5, 0xb8, 0x96, 0x59,
	0xb8, 0x64, 0xd7, 0x98, 0x85, 0x2a, 0x95, 0x4b, 0xb2, 0x05, 0xa5, 0x30, 0x98, 0x78, 0xce, 0x35,
	0x9e, 0xbf, 0x4a, 0x35, 0x45, 0x1e, 0x40, 0x35, 0xf2, 0x46, 0xbe, 0x2d, 0x66, 0x9c, 0x99, 0x45,
	0x14, 0xcd, 0x19, 0xe4, 0x63, 0x00, 0x87, 0x33, 0x97, 0xf9, 0xc2, 0xb3, 0x27, 0xe6, 0x2a, 0x8a,
	0x53, 0x1c, 0xd2, 0x84, 0xca, 0xd5, 0xee, 0xf4, 0xfb, 0x03, 0x5b, 0x30, 0xb3, 0x84, 0xd2, 0x84,
	0xb6, 0xde, 0x40, 0xb5, 0xc7, 0x3d, 0x87, 0x61, 0x90, 0x16, 0xd4, 0x43, 0x49, 0xf4, 0x18, 0x7f,
	0xe3, 0x7b, 0x2a, 0xd8, 0x02, 0xcd, 0xf0, 0xc8, 0xa7, 0xd0, 0x08, 0xbd, 0x2b, 0x36, 0x89, 0x62,
	0xa5, 0x3c, 0x2a, 0x65, 0x99, 0xd6, 0xdf, 0x4a, 0x50, 0x4f, 0x5f, 0x9b, 0x3c, 0xc1, 0x85, 0x27,
	0x22, 0xc1, 0x3d, 0x7f, 0x64, 0xe6, 0x1e, 0x15, 0x9e, 0x16, 0xe9, 0x9c, 0x41, 0x1e, 0x41, 0x6d,
	0x6a, 0xfb, 0xae, 0x7c, 0x3c, 0xf2, 0xf2, 0xf3, 0x28, 0x4f, 0xb3, 0xc8, 0x2e, 0x80, 0xbc, 0x78,
	0x27, 0x7e, 0x1d, 0x85, 0xa7, 0xb5, 0xf6, 0xe3, 0x85, 0xd7, 0x81, 0x84, 0xd2, 0xe9, 0xf8, 0x82,
	0x5f, 0xd3, 0x94, 0x91, 0x7c, 0x8e, 0xdf, 0x31, 0x2e, 0x1f, 0xae, 0x4e, 0x61, 0x4c, 0x92, 0x5f,
	0x42, 0xcd, 0x09, 0x7c, 0xf9, 0x7a, 0x3d, 0x5f, 0x44, 0x98, 0xc1, 0x5a, 0xfb, 0xe1, 0x12, 0xef,
	0x73, 0x25, 0x9a, 0xb6, 0x68, 0x7e, 0x03, 0xeb, 0x37, 0x76, 0x8e, 0x2f, 0x57, 0xa6, 0xb0, 0xa1,
	0x2e, 0x37, 0xa9, 0xd5, 0x3c, 0xf2, 0x14, 0xf1, 0x8b, 0xfc, 0xd7, 0xb9, 0xe6, 0x7f, 0x72, 0x50,
	0x4b, 0xf9, 0x96, 0x17, 0x3a, 0xf5, 0xfc, 0x73, 0x1d, 0xac, 0x7a, 0x32, 0x29, 0x0e, 0x39, 0x87,
	0x46, 0x8f, 0xf1, 0x24, 0xb4, 0x6b, 0x4c, 0x58, 0xad, 0xfd, 0xec, 0xbd, 0x11, 0xb7, 0x32, 0x26,
	0x2a, 0x3d, 0x59, 0x37, 0x4d, 0x0f, 0xc8, 0xa2, 0xd2, 0x92, 0x93, 0x7c, 0x93, 0x3e, 0x49, 0xad,
	0xfd, 0xf3, 0xe5, 0xf7, 0xa0, 0x7c, 0xa4, 0x73, 0x96, 0x3a, 0xf2, 0xff, 0x72, 0xb0, 0xb9, 0x54,
	0x89, 0xfc, 0x1a, 0x4a, 0xd3, 0xc0, 0x65, 0x93, 0x08, 0x9f, 0x49, 0xad, 0xbd, 0x7d, 0x4b, 0xef,
	0xad, 0x63, 0xb4, 0x52, 0x07, 0xd3, 0x2e, 0x9a, 0x4f, 0x60, 0x1d, 0xd9, 0x73, 0x3d, 0x59, 0x89,
	0xef, 0x6c, 0x3e, 0xc5, 0xf3, 0x54, 0x28, 0xae, 0x9b, 0x1c, 0x6a, 0x29, 0xeb, 0xf4, 0x89, 0x75,
	0x61, 0x1e, 0x67, 0x4f, 0xfc, 0xd5, 0x4f, 0x8a, 0x69, 0xce, 0x48, 0x65, 0xc0, 0xfa, 0x67, 0x1e,
	0x8c, 0x34, 0x6a, 0x62, 0x05, 0x7e, 0x0c, 0x20, 0x34, 0xce, 0x32, 0x1e, 0xdf, 0xfc, 0x9c, 0x43,
	0x5e, 0x40, 0x43, 0x78, 0xce, 0x25, 0x13, 0x83, 0xd0, 0xe6, 0xf6, 0x34, 0xd2, 0xf1, 0x28, 0x9c,
	0x3c, 0x43, 0x49, 0x0f, 0x05, 0xb4, 0x2e, 0x52, 0x94, 0x44, 0x7c, 0xac, 0xe2, 0x01, 0xa2, 0x5c,
	0x21, 0x85, 0xf8, 0x49, 0xf5, 0xd3, 0x6a, 0x98, 0x00, 0x41, 0x0a, 0xb9, 0x8b, 0x59, 0xe4, 0xbe,
	0x89, 0xd3, 0xab, 0xb7, 0xc2, 0xe9, 0x1b, 0x1d, 0xa7, 0xf4, 0x23, 0x1d, 0x87, 0x3c, 0x81, 0xb2,
	0xc6, 0x67, 0xf3, 0x11, 0x3e, 0x82, 0x5a, 0x0a, 0xc7, 0x69, 0x2c, 0xb3, 0x7e, 0x0f, 0xd5, 0xc4,
	0x5c, 0x96, 0xd7, 0xbc, 0x9f, 0xd5, 0xa9, 0x22, 0xc8, 0x43, 0x80, 0x48, 0x75, 0xab, 0x81, 0xe7,
	0x6a, 0xa8, 0xad, 0x6a, 0x4e, 0xd7, 0x95, 0xf9, 0x66, 0x57, 0xa1, 0xc7, 0x6d, 0x21, 0x2b, 0xad,
	0x80, 0x50, 0x96, 0xe2, 0x58, 0xff, 0x2d, 0x42, 0xb9, 0xcf, 0x46, 0x07, 0xb6, 0xb0, 0xb1, 0x2a,
	0x6d, 0xdf, 0x1b, 0xb2, 0x48, 0x74, 0x5d, 0xbd, 0x4b, 0x8a, 0x83, 0x4d, 0x8d, 0xbd, 0xd5, 0x78,
	0x28, 0x97, 0x08, 0xfa, 0x76, 0x34, 0x46, 0xbf, 0x75, 0x8a, 0x6b, 0x09, 0xc6, 0x21, 0x0f, 0x86,
	0xde, 0x84, 0xc5, 0xb9, 0x4d, 0xe8, 0xb8, 0x2d, 0xae, 0xce, 0xdb, 0x62, 0x13, 0x2a, 0xee, 0x4c,
	0x47, 0x27, 0xb3, 0xb6, 0x4a, 0x13, 0x7a, 0xe1, 0x2a, 0xca, 0x1f, 0x72, 0x15, 0x95, 0x1f, 0xbb,
	0x8a, 0x67, 0x70, 0xd7, 0xb1, 0x27, 0xce, 0x20, 0x64, 0xdc, 0x61, 0xa1, 0x98, 0xd9, 0x93, 0x01,
	0x9e, 0x09, 0xb0, 0x7c, 0x88, 0x94, 0xf5, 0x12, 0xd1, 0x91, 0x3c, 0xe1, 0xed, 0x2e, 0x4f, 0x86,
	0x3f, 0x9c, 0x4d, 0x26, 0xbd, 0x38, 0x19, 0x8f, 0x51, 0x57, 0x85, 0x7f, 0xee, 0xb9, 0x2c, 0xd0,
	0x12, 0x9a, 0x51, 0x23, 0x5f, 0x41, 0x23, 0x4d, 0xb7, 0x4d, 0xeb, 0x87, 0xec, 0xb2, 0x7a, 0x37,
	0x0d, 0xb7, 0xcd, 0x4f, 0x6e, 0x65, 0xb8, 0x4d, 0x76, 0x81, 0x44, 0x6c, 0x34, 0x65, 0xbe, 0x2e,
	0x3a, 0x26, 0x18, 0x8f, 0xcc, 0x27, 0x98, 0x38, 0xa2, 0x26, 0x05, 0x36, 0xea, 0x25, 0x12, 0xba,
	0xa1, 0xb5, 0xe7, 0x2c, 0xd2, 0x02, 0xf2, 0x2a, 0xe0, 0x0e, 0x4b, 0x06, 0x27, 0x4f, 0x76, 0xce,
	0xcf, 0x54, 0x0a, 0x17, 0x25, 0xd6, 0x36, 0x34, 0x32, 0x3e, 0xe5, 0x4b, 0x1a, 0xf2, 0x40, 0x81,
	0x56, 0x91, 0xe2, 0x9a, 0xac, 0x41, 0x5e, 0x04, 0xf8, 0xdc, 0x8a, 0x34, 0x2f, 0x02, 0xeb, 0x5f,
	0xab, 0x50, 0x4f, 0x9f, 0x43, 0x1a, 0xf9, 0xf6, 0x94, 0xe1, 0x50, 0x53, 0xa5, 0xb8, 0x96, 0x55,
	0xf2, 0xce, 0x73, 0xc5, 0xd8, 0xdc, 0xc0, 0xd7, 0xa4, 0x08, 0x39, 0x77, 0x8c, 0x99, 0x37, 0x1a,
	0x0b, 0x93, 0x20, 0x5b, 0x53, 0x12, 0x07, 0x2e, 0x3c, 0x09, 0x4f, 0xcc, 0xbc, 0x83, 0x82, 0x98,
	0x94, 0x4f, 0x75, 0x18, 0x46, 0xe6, 0x5d, 0xd5, 0x14, 0x86, 0x61, 0x44, 0x9e, 0x41, 0x69, 0x18,
	0xf0, 0xa9, 0x2d, 0xcc, 0x4d, 0x1c, 0xbd, 0xcc, 0x85, 0xc4, 0xb6, 0x5e, 0xa1, 0x9c, 0x6a, 0x3d,
	0xb9, 0xeb, 0x30, 0x8c, 0x0e, 0x98, 0x6f, 0x6e, 0xa1, 0x1b, 0x4d, 0x91, 0x6d, 0x28, 0xeb, 0x92,
	0x30, 0xef, 0xa1, 0xab, 0xfb, 0x8b, 0xae, 0xe2, 0xbb, 0x8a, 0x35, 0x65, 0x40, 0xa3, 0x20, 0x34,
	0x4d, 0x0c, 0x53, 0x2e, 0xc9, 0x0b, 0x28, 0x33, 0x5f, 0x01, 0xe9, 0x7d, 0x74, 0xf3, 0x60, 0xd1,
	0x0d, 0x12, 0xfb, 0x81, 0xcb, 0x1c, 0x1a, 0x2b, 0xe3, 0x38, 0x15, 0x4c, 0x02, 0x7e, 0xc0, 0x42,
	0x31, 0x36, 0x9b, 0xe8, 0x30, 0xc5, 0x21, 0x87, 0x50, 0x77, 0xc6, 0x3c, 0x98, 0xda, 0xea, 0x38,
	0xe6, 0x47, 0xe8, 0xfc, 0x93, 0x45, 0xe7, 0xfb, 0xa8, 0xd5, 0x9f, 0x5d, 0x44, 0xf6, 0x34, 0x9c,
	0x78, 0xfe, 0x88, 0x66, 0x0c, 0x65, 0x76, 0xdf, 0xce, 0x6c, 0x6c, 0xe0, 0x0f, 0x30, 0x01, 0x31,
	0x69, 0x3d, 0x84, 0x92, 0xd6, 0x01, 0x28, 0x1d, 0xf7, 0x3a, 0x87, 0x67, 0x7d, 0x63, 0x85, 0x94,
	0xa1, 0x70, 0xdc, 0xdb, 0x31, 0x72, 0xd6, 0x1f, 0xa0, 0x1c, 0xdf, 0xf1, 0x1d, 0x58, 0xef, 0x9c,
	0xec, 0x9f, 0x1e, 0x74, 0xe8, 0xe0, 0xa0, 0xf3, 0x6a, 0xf7, 0xcd, 0x6b, 0x39, 0x8d, 0x6e, 0x40,
	0xe3, 0xa8, 0xfd, 0x62, 0x67, 0xb0, 0xb7, 0xdb, 0xef, 0xbc, 0xee, 0x9e, 0x74, 0x8c, 0x1c, 0x69,
	0x40, 0x15, 0x59, 0xc7, 0xbb, 0xdd, 0x13, 0x23, 0x9f, 0x90, 0x47, 0xdd, 0xc3, 0x23, 0xa3, 0x40,
	0xee, 0xc3, 0x26, 0x92, 0xfb, 0xa7, 0x27, 0xfd, 0x33, 0xba, 0xdb, 0x3d, 0xe9, 0x1c, 0x28, 0x51,
	0xd1, 0x6a, 0x03, 0xcc, 0x93, 0x44, 0x2a, 0x50, 0x94, 0x8a, 0xc6, 0x8a, 0x5e, 0x3d, 0x37, 0x72,
	0x32, 0xac, 0xf3, 0xde, 0xd7, 0x46, 0x5e, 0x2d, 0x5e, 0x1a, 0x05, 0x6b, 0x1f, 0x36, 0x16, 0xce,
	0x4e, 0xd6, 0x00, 0xf6, 0x8f, 0xe8, 0xe9, 0xf1, 0xee, 0x60, 0xa7, 0xfd, 0xcc, 0x58, 0xc9, 0xd0,
	0x6d, 0x23, 0x97, 0xa6, 0x77, 0x76, 0x8c, 0xbc, 0xf5, 0x16, 0x36, 0xe3, 0x4f, 0x0e, 0xe6, 0xf6,
	0x55, 0x49, 0x21, 0x0e, 0x1b, 0x50, 0x98, 0xf1, 0x49, 0xdc, 0x9d, 0x67, 0x7c, 0x82, 0x63, 0x33,
	0x8e, 0x9f, 0x1a, 0x7c, 0x35, 0x45, 0x5a, 0x70, 0xe7, 0x06, 0x6c, 0x0d, 0xa4, 0xa5, 0x9a, 0xad,
	0x37, 0xc2, 0x0c, 0x6c, 0xbd, 0xe1, 0x13, 0xeb, 0x37, 0xd0, 0x48, 0xb6, 0xc4, 0xad, 0x5e, 0x40,
	0x45, 0x17, 0x73, 0x3c, 0x8d, 0x34, 0x55, 0xa7, 0x5d, 0x16, 0x18, 0x4d, 0x74, 0x17, 0xbf, 0x6f,
	0xac, 0xbf, 0xe4, 0x60, 0x3d, 0xb1, 0xa2, 0x2c, 0x9a, 0x4d, 0x44, 0xdc, 0x30, 0x72, 0xf3, 0x86,
	0xb1, 0x05, 0xab, 0x8c, 0xf3, 0x80, 0xab, 0x46, 0x75, 0xb4, 0x42, 0x15, 0x49, 0x9e, 0x42, 0xd1,
	0xb5, 0x85, 0xad, 0x1b, 0x37, 0xc9, 0xc6, 0x20, 0xf7, 0x3e, 0x5a, 0xa1, 0xa8, 0x41, 0x3e, 0x87,
	0x62, 0xea, 0x43, 0x66, 0x53, 0x21, 0xef, 0x8d, 0x29, 0x83, 0xa2, 0xca, 0x5e, 0x05, 0x4a, 0x1c,
	0x03, 0xb1, 0xfe, 0x08, 0xeb, 0x94, 0x8d, 0xbc, 0x48, 0xb0, 0xe4, 0xdb, 0x6d, 0x0b, 0x4a, 0x11,
	0x73, 0x38, 0x8b, 0xbf, 0x58, 0x34, 0x25, 0x1b, 0x92, 0x1e, 0xa9, 0xaf, 0x75, 0xb2, 0x13, 0xfa,
	0x43, 0xbf, 0xe1, 0xfe, 0x94, 0x83, 0xc6, 0x49, 0x20, 0xbc, 0xe1, 0xb5, 0x4e, 0xe6, 0x92, 0x1b,
	0xfe, 0x0c, 0xca, 0x91, 0x6a, 0xc3, 0xda, 0x6b, 0x3d, 0x06, 0x5e, 0xcc, 0x7c, 0x2c, 0x94, 0x61,
	0x0b, 0x3b, 0xba, 0xec, 0xba, 0x98, 0x80, 0x02, 0xd5, 0x54, 0xa6, 0xeb, 0x6e, 0x64, 0xbb, 0xee,
	0xb7, 0xc5, 0x4a, 0xde, 0x28, 0x7c, 0x5b, 0xac, 0x3c, 0x36, 0x2c, 0xeb, 0xaf, 0x79, 0xa8, 0xa7,
	0xc7, 0x28, 0xf9, 0xdd, 0xc2, 0x99, 0xe3, 0x85, 0x1e, 0xf3, 0x85, 0xee, 0xf9, 0x73, 0x86, 0x9c,
	0x2e, 0x86, 0xb6, 0xc3, 0x06, 0xf3, 0xd9, 0xb0, 0x4e, 0xab, 0x92, 0x73, 0x2e, 0x19, 0xe4, 0x3e,
	0x54, 0xde, 0x79, 0xfe, 0x20, 0xe4, 0xc1, 0x85, 0x9e, 0x01, 0xca, 0xef, 0x3c, 0xbf, 0xc7, 0x83,
	0x0b, 0xf9, 0x34, 0x13, 0x37, 0x03, 0x6e, 0xfb, 0xae, 0xea, 0xaa, 0x6a, 0x22, 0xd8, 0x48, 0x44,
	0xd4, 0xf6, 0x5d, 0x6c, 0xaa, 0x04, 0x8a, 0x11, 0x63, 0xae, 0x9e, 0x0d, 0x70, 0x4d, 0x3e, 0x07,
	0x63, 0x3e, 0xaa, 0x0c, 0x2e, 0x26, 0x81, 0x73, 0x89, 0x43, 0x42, 0x9d, 0xae, 0xcf, 0xf9, 0x7b,
	0x92, 0x4d, 0x8e, 0x60, 0x23, 0xa5, 0xaa, 0x67, 0x47, 0x35, 0x30, 0x7c, 0x94, 0x9a, 0x1d, 0x3b,
	0x89, 0x8e, 0x9e, 0x22, 0x53, 0x1b, 0x28, 0x8e, 0xd5, 0x05, 0xa2, 0x74, 0xfb, 0xcc, 0x77, 0x19,
	0xd7, 0x69, 0x7a, 0x0c, 0xf5, 0x08, 0xe9, 0x81, 0x1f, 0xf8, 0x0e, 0xd3, 0x1f, 0x0b, 0x35, 0xc5,
	0x3b, 0x91, 0xac, 0x25, 0x35, 0xf1, 0x3d, 0x6c, 0x2d, 0xdf, 0x96, 0x3c, 0x81, 0x35, 0x87, 0x33,
	0x15, 0x2c, 0x0f, 0x66, 0xbe, 0xab, 0x8b, 0xa4, 0x11, 0x73, 0xa9, 0x64, 0x92, 0x97, 0x70, 0x3f,
	0xab, 0xa6, 0x92, 0xa0, 0x52, 0xa9, 0x36, 0xda, 0xca, 0x58, 0x60, 0x32, 0x64, 0x3e, 0xad, 0x7f,
	0xe4, 0xa1, 0xdc, 0xb3, 0xaf, 0xf1, 0xb9, 0x2d, 0x0c, 0xd5, 0xb9, 0xdb, 0x0d, 0xd5, 0x58, 0x23,
	0xf2, 0x80, 0x7a, 0x2f, 0x4d, 0x2d, 0x4f, 0x76, 0xe1, 0x03, 0x92, 0x4d, 0xba, 0x70, 0x57, 0x47,
	0xa6, 0xb3, 0xab, 0x9d, 0x15, 0x11, 0x8b, 0xee, 0xa5, 0x9c, 0xa5, 0x6f, 0x83, 0x12, 0xb1, 0x78,
	0x43, 0xcf, 0x61, 0x8d, 0x5d, 0x85, 0xcc, 0x11, 0xcc, 0x1d, 0xe0, 0xa0, 0xaf, 0x47, 0xf7, 0x9b,
	0x5f, 0x01, 0x8d, 0x58, 0x0b, 0x59, 0xed, 0x7f, 0xe7, 0xa0, 0x9e, 0xc6, 0x0f, 0xb2, 0x07, 0xeb,
	0x87, 0x4c, 0x64, 0x58, 0xe6, 0x02, 0xca, 0x68, 0x14, 0x69, 0x2e, 0xc7, 0x1f, 0xf2, 0x3b, 0xd8,
	0x5c, 0xfa, 0x43, 0x89, 0xa8, 0x2f, 0xfa, 0xf7, 0xfd, 0xbb, 0x6a, 0x5a, 0xef, 0x53, 0x51, 0xff,
	0xa3, 0xc8, 0xa7, 0x50, 0xec, 0xc9, 0x96, 0xa3, 0xfe, 0xe3, 0xc4, 0x3f, 0xcb, 0x9a, 0x59, 0xb2,
	0x7d, 0x02, 0x70, 0x36, 0xff, 0xb2, 0xfa, 0x15, 0x90, 0x18, 0x03, 0x53, 0xdc, 0xbb, 0x68, 0x72,
	0x03, 0x1c, 0x9b, 0x0a, 0x80, 0x33, 0x98, 0xf5, 0x2c, 0xb7, 0x57, 0xfe, 0xed, 0x6a, 0xeb, 0x4b,
	0x9f, 0x89, 0x8b, 0x12, 0xfe, 0xac, 0xdb, 0xfe, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6f, 0xbf,
	0xc3, 0x6f, 0xc0, 0x13, 0x00, 0x00,
}
