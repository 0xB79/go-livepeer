// Code generated by protoc-gen-go. DO NOT EDIT.
// source: net/redeemer.proto

package net

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MaxFloatRequest struct {
	Sender               []byte   `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MaxFloatRequest) Reset()         { *m = MaxFloatRequest{} }
func (m *MaxFloatRequest) String() string { return proto.CompactTextString(m) }
func (*MaxFloatRequest) ProtoMessage()    {}
func (*MaxFloatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_41a074e4ea0232f2, []int{0}
}

func (m *MaxFloatRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MaxFloatRequest.Unmarshal(m, b)
}
func (m *MaxFloatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MaxFloatRequest.Marshal(b, m, deterministic)
}
func (m *MaxFloatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaxFloatRequest.Merge(m, src)
}
func (m *MaxFloatRequest) XXX_Size() int {
	return xxx_messageInfo_MaxFloatRequest.Size(m)
}
func (m *MaxFloatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MaxFloatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MaxFloatRequest proto.InternalMessageInfo

func (m *MaxFloatRequest) GetSender() []byte {
	if m != nil {
		return m.Sender
	}
	return nil
}

type Ticket struct {
	Recipient              []byte   `protobuf:"bytes,1,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Sender                 []byte   `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	FaceValue              []byte   `protobuf:"bytes,3,opt,name=face_value,json=faceValue,proto3" json:"face_value,omitempty"`
	WinProb                []byte   `protobuf:"bytes,4,opt,name=win_prob,json=winProb,proto3" json:"win_prob,omitempty"`
	SenderNonce            uint32   `protobuf:"varint,5,opt,name=sender_nonce,json=senderNonce,proto3" json:"sender_nonce,omitempty"`
	RecipientRandHash      []byte   `protobuf:"bytes,6,opt,name=recipient_rand_hash,json=recipientRandHash,proto3" json:"recipient_rand_hash,omitempty"`
	CreationRound          int64    `protobuf:"varint,7,opt,name=creation_round,json=creationRound,proto3" json:"creation_round,omitempty"`
	CreationRoundBlockHash []byte   `protobuf:"bytes,8,opt,name=creation_round_block_hash,json=creationRoundBlockHash,proto3" json:"creation_round_block_hash,omitempty"`
	Sig                    []byte   `protobuf:"bytes,9,opt,name=sig,proto3" json:"sig,omitempty"`
	RecipientRand          []byte   `protobuf:"bytes,10,opt,name=recipient_rand,json=recipientRand,proto3" json:"recipient_rand,omitempty"`
	ParamsExpirationBlock  int64    `protobuf:"varint,11,opt,name=params_expiration_block,json=paramsExpirationBlock,proto3" json:"params_expiration_block,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *Ticket) Reset()         { *m = Ticket{} }
func (m *Ticket) String() string { return proto.CompactTextString(m) }
func (*Ticket) ProtoMessage()    {}
func (*Ticket) Descriptor() ([]byte, []int) {
	return fileDescriptor_41a074e4ea0232f2, []int{1}
}

func (m *Ticket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ticket.Unmarshal(m, b)
}
func (m *Ticket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ticket.Marshal(b, m, deterministic)
}
func (m *Ticket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ticket.Merge(m, src)
}
func (m *Ticket) XXX_Size() int {
	return xxx_messageInfo_Ticket.Size(m)
}
func (m *Ticket) XXX_DiscardUnknown() {
	xxx_messageInfo_Ticket.DiscardUnknown(m)
}

var xxx_messageInfo_Ticket proto.InternalMessageInfo

func (m *Ticket) GetRecipient() []byte {
	if m != nil {
		return m.Recipient
	}
	return nil
}

func (m *Ticket) GetSender() []byte {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *Ticket) GetFaceValue() []byte {
	if m != nil {
		return m.FaceValue
	}
	return nil
}

func (m *Ticket) GetWinProb() []byte {
	if m != nil {
		return m.WinProb
	}
	return nil
}

func (m *Ticket) GetSenderNonce() uint32 {
	if m != nil {
		return m.SenderNonce
	}
	return 0
}

func (m *Ticket) GetRecipientRandHash() []byte {
	if m != nil {
		return m.RecipientRandHash
	}
	return nil
}

func (m *Ticket) GetCreationRound() int64 {
	if m != nil {
		return m.CreationRound
	}
	return 0
}

func (m *Ticket) GetCreationRoundBlockHash() []byte {
	if m != nil {
		return m.CreationRoundBlockHash
	}
	return nil
}

func (m *Ticket) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func (m *Ticket) GetRecipientRand() []byte {
	if m != nil {
		return m.RecipientRand
	}
	return nil
}

func (m *Ticket) GetParamsExpirationBlock() int64 {
	if m != nil {
		return m.ParamsExpirationBlock
	}
	return 0
}

type MaxFloatUpdate struct {
	Sender               []byte   `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	MaxFloat             []byte   `protobuf:"bytes,2,opt,name=max_float,json=maxFloat,proto3" json:"max_float,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MaxFloatUpdate) Reset()         { *m = MaxFloatUpdate{} }
func (m *MaxFloatUpdate) String() string { return proto.CompactTextString(m) }
func (*MaxFloatUpdate) ProtoMessage()    {}
func (*MaxFloatUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_41a074e4ea0232f2, []int{2}
}

func (m *MaxFloatUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MaxFloatUpdate.Unmarshal(m, b)
}
func (m *MaxFloatUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MaxFloatUpdate.Marshal(b, m, deterministic)
}
func (m *MaxFloatUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaxFloatUpdate.Merge(m, src)
}
func (m *MaxFloatUpdate) XXX_Size() int {
	return xxx_messageInfo_MaxFloatUpdate.Size(m)
}
func (m *MaxFloatUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_MaxFloatUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_MaxFloatUpdate proto.InternalMessageInfo

func (m *MaxFloatUpdate) GetSender() []byte {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *MaxFloatUpdate) GetMaxFloat() []byte {
	if m != nil {
		return m.MaxFloat
	}
	return nil
}

func init() {
	proto.RegisterType((*MaxFloatRequest)(nil), "net.MaxFloatRequest")
	proto.RegisterType((*Ticket)(nil), "net.Ticket")
	proto.RegisterType((*MaxFloatUpdate)(nil), "net.MaxFloatUpdate")
}

func init() { proto.RegisterFile("net/redeemer.proto", fileDescriptor_41a074e4ea0232f2) }

var fileDescriptor_41a074e4ea0232f2 = []byte{
	// 439 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0xd1, 0x6e, 0xd3, 0x30,
	0x14, 0x5d, 0x08, 0x74, 0xed, 0xed, 0xda, 0x81, 0x07, 0xc5, 0xeb, 0x40, 0x2a, 0x91, 0x90, 0xca,
	0x4b, 0x8a, 0x00, 0x81, 0x78, 0x9d, 0x54, 0xc4, 0xcb, 0x10, 0x44, 0xc0, 0xab, 0xe5, 0x24, 0xb7,
	0xad, 0xb5, 0xc6, 0x0e, 0x8e, 0xc3, 0xca, 0xcf, 0xf0, 0x33, 0xfc, 0x18, 0xb2, 0x9d, 0x86, 0x05,
	0xa9, 0x6f, 0xf6, 0x39, 0xe7, 0x9e, 0x73, 0xa4, 0x7b, 0x81, 0x48, 0x34, 0x0b, 0x8d, 0x39, 0x62,
	0x81, 0x3a, 0x2e, 0xb5, 0x32, 0x8a, 0x84, 0x12, 0xcd, 0xf4, 0x62, 0xad, 0xd4, 0x7a, 0x8b, 0x0b,
	0x07, 0xa5, 0xf5, 0x6a, 0x81, 0x45, 0x69, 0x7e, 0x79, 0x45, 0xf4, 0x02, 0x4e, 0xaf, 0xf8, 0xee,
	0xc3, 0x56, 0x71, 0x93, 0xe0, 0x8f, 0x1a, 0x2b, 0x43, 0x26, 0xd0, 0xab, 0x50, 0xe6, 0xa8, 0x69,
	0x30, 0x0b, 0xe6, 0x27, 0x49, 0xf3, 0x8b, 0x7e, 0x87, 0xd0, 0xfb, 0x2a, 0xb2, 0x6b, 0x34, 0xe4,
	0x09, 0x0c, 0x34, 0x66, 0xa2, 0x14, 0x28, 0x4d, 0xa3, 0xfa, 0x07, 0xdc, 0x32, 0xb8, 0x73, 0xdb,
	0x80, 0x3c, 0x05, 0x58, 0xf1, 0x0c, 0xd9, 0x4f, 0xbe, 0xad, 0x91, 0x86, 0x7e, 0xcc, 0x22, 0xdf,
	0x2d, 0x40, 0xce, 0xa1, 0x7f, 0x23, 0x24, 0x2b, 0xb5, 0x4a, 0xe9, 0x5d, 0x47, 0x1e, 0xdf, 0x08,
	0xf9, 0x59, 0xab, 0x94, 0x3c, 0x83, 0x13, 0xef, 0xc1, 0xa4, 0x92, 0x19, 0xd2, 0x7b, 0xb3, 0x60,
	0x3e, 0x4a, 0x86, 0x1e, 0xfb, 0x64, 0x21, 0x12, 0xc3, 0x59, 0xdb, 0x80, 0x69, 0x2e, 0x73, 0xb6,
	0xe1, 0xd5, 0x86, 0xf6, 0x9c, 0xd1, 0x83, 0x96, 0x4a, 0xb8, 0xcc, 0x3f, 0xf2, 0x6a, 0x43, 0x9e,
	0xc3, 0x38, 0xd3, 0xc8, 0x8d, 0x50, 0x92, 0x69, 0x55, 0xcb, 0x9c, 0x1e, 0xcf, 0x82, 0x79, 0x98,
	0x8c, 0xf6, 0x68, 0x62, 0x41, 0xf2, 0x1e, 0xce, 0xbb, 0x32, 0x96, 0x6e, 0x55, 0x76, 0xed, 0xcd,
	0xfb, 0xce, 0x7c, 0xd2, 0x99, 0xb8, 0xb4, 0xb4, 0x4b, 0xb8, 0x0f, 0x61, 0x25, 0xd6, 0x74, 0xe0,
	0x44, 0xf6, 0x69, 0x33, 0xbb, 0x1d, 0x29, 0x38, 0x72, 0xd4, 0xa9, 0x47, 0xde, 0xc2, 0xe3, 0x92,
	0x6b, 0x5e, 0x54, 0x0c, 0x77, 0xa5, 0xd0, 0x3e, 0xdc, 0xc5, 0xd2, 0xa1, 0xeb, 0xf8, 0xc8, 0xd3,
	0xcb, 0x96, 0x75, 0xa1, 0xd1, 0x12, 0xc6, 0xfb, 0x5d, 0x7e, 0x2b, 0x73, 0x6e, 0xf0, 0xd0, 0x2a,
	0xc9, 0x05, 0x0c, 0x0a, 0xbe, 0x63, 0x2b, 0x2b, 0x6d, 0x96, 0xd4, 0x2f, 0x9a, 0xd1, 0x57, 0x7f,
	0x02, 0x18, 0xfb, 0x3d, 0x27, 0xcd, 0x35, 0x91, 0x37, 0x30, 0xfc, 0x52, 0x63, 0x8d, 0xcd, 0xfa,
	0x87, 0xb1, 0x44, 0x13, 0xfb, 0xcf, 0x74, 0x12, 0xfb, 0xfb, 0x8a, 0xf7, 0xf7, 0x15, 0x2f, 0xed,
	0x7d, 0x45, 0x47, 0xe4, 0x1d, 0xf4, 0xf7, 0x7d, 0xc8, 0x43, 0x37, 0xf2, 0xdf, 0xa9, 0x4d, 0xcf,
	0x3a, 0xa8, 0x2f, 0x1d, 0x1d, 0x91, 0x4b, 0x38, 0xbd, 0x52, 0x52, 0x18, 0xa5, 0xdb, 0xf9, 0x03,
	0x29, 0x07, 0x1c, 0x5e, 0x06, 0x69, 0xcf, 0x09, 0x5f, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x87,
	0x45, 0xb4, 0xe4, 0x17, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TicketRedeemerClient is the client API for TicketRedeemer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TicketRedeemerClient interface {
	QueueTicket(ctx context.Context, in *Ticket, opts ...grpc.CallOption) (*empty.Empty, error)
	MaxFloat(ctx context.Context, in *MaxFloatRequest, opts ...grpc.CallOption) (*MaxFloatUpdate, error)
	MonitorMaxFloat(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (TicketRedeemer_MonitorMaxFloatClient, error)
}

type ticketRedeemerClient struct {
	cc *grpc.ClientConn
}

func NewTicketRedeemerClient(cc *grpc.ClientConn) TicketRedeemerClient {
	return &ticketRedeemerClient{cc}
}

func (c *ticketRedeemerClient) QueueTicket(ctx context.Context, in *Ticket, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/net.TicketRedeemer/QueueTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketRedeemerClient) MaxFloat(ctx context.Context, in *MaxFloatRequest, opts ...grpc.CallOption) (*MaxFloatUpdate, error) {
	out := new(MaxFloatUpdate)
	err := c.cc.Invoke(ctx, "/net.TicketRedeemer/MaxFloat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketRedeemerClient) MonitorMaxFloat(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (TicketRedeemer_MonitorMaxFloatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TicketRedeemer_serviceDesc.Streams[0], "/net.TicketRedeemer/MonitorMaxFloat", opts...)
	if err != nil {
		return nil, err
	}
	x := &ticketRedeemerMonitorMaxFloatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TicketRedeemer_MonitorMaxFloatClient interface {
	Recv() (*MaxFloatUpdate, error)
	grpc.ClientStream
}

type ticketRedeemerMonitorMaxFloatClient struct {
	grpc.ClientStream
}

func (x *ticketRedeemerMonitorMaxFloatClient) Recv() (*MaxFloatUpdate, error) {
	m := new(MaxFloatUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TicketRedeemerServer is the server API for TicketRedeemer service.
type TicketRedeemerServer interface {
	QueueTicket(context.Context, *Ticket) (*empty.Empty, error)
	MaxFloat(context.Context, *MaxFloatRequest) (*MaxFloatUpdate, error)
	MonitorMaxFloat(*empty.Empty, TicketRedeemer_MonitorMaxFloatServer) error
}

// UnimplementedTicketRedeemerServer can be embedded to have forward compatible implementations.
type UnimplementedTicketRedeemerServer struct {
}

func (*UnimplementedTicketRedeemerServer) QueueTicket(ctx context.Context, req *Ticket) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueTicket not implemented")
}
func (*UnimplementedTicketRedeemerServer) MaxFloat(ctx context.Context, req *MaxFloatRequest) (*MaxFloatUpdate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaxFloat not implemented")
}
func (*UnimplementedTicketRedeemerServer) MonitorMaxFloat(req *empty.Empty, srv TicketRedeemer_MonitorMaxFloatServer) error {
	return status.Errorf(codes.Unimplemented, "method MonitorMaxFloat not implemented")
}

func RegisterTicketRedeemerServer(s *grpc.Server, srv TicketRedeemerServer) {
	s.RegisterService(&_TicketRedeemer_serviceDesc, srv)
}

func _TicketRedeemer_QueueTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ticket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketRedeemerServer).QueueTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/net.TicketRedeemer/QueueTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketRedeemerServer).QueueTicket(ctx, req.(*Ticket))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketRedeemer_MaxFloat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaxFloatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketRedeemerServer).MaxFloat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/net.TicketRedeemer/MaxFloat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketRedeemerServer).MaxFloat(ctx, req.(*MaxFloatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketRedeemer_MonitorMaxFloat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TicketRedeemerServer).MonitorMaxFloat(m, &ticketRedeemerMonitorMaxFloatServer{stream})
}

type TicketRedeemer_MonitorMaxFloatServer interface {
	Send(*MaxFloatUpdate) error
	grpc.ServerStream
}

type ticketRedeemerMonitorMaxFloatServer struct {
	grpc.ServerStream
}

func (x *ticketRedeemerMonitorMaxFloatServer) Send(m *MaxFloatUpdate) error {
	return x.ServerStream.SendMsg(m)
}

var _TicketRedeemer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "net.TicketRedeemer",
	HandlerType: (*TicketRedeemerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueueTicket",
			Handler:    _TicketRedeemer_QueueTicket_Handler,
		},
		{
			MethodName: "MaxFloat",
			Handler:    _TicketRedeemer_MaxFloat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MonitorMaxFloat",
			Handler:       _TicketRedeemer_MonitorMaxFloat_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "net/redeemer.proto",
}
