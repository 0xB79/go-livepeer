# Base image 
FROM ubuntu:16.04 as base

ENV PATH "/usr/local/go/bin:/go/bin:${PATH}"
ENV PKG_CONFIG_PATH "/root/compiled/lib/pkgconfig"
ENV CPATH /usr/local/cuda/include
ENV LIBRARY_PATH /usr/local/cuda/lib64

RUN apt-get update \
  && apt-get install -y software-properties-common curl apt-transport-https \
  && curl https://dl.google.com/go/go1.15.5.linux-amd64.tar.gz | tar -C /usr/local -xz \
  && curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - \
  && add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs)  stable" \
  && apt-key adv --keyserver keyserver.ubuntu.com --recv 15CF4D18AF4F7421 \
  && add-apt-repository "deb [arch=amd64] http://apt.llvm.org/xenial/ llvm-toolchain-xenial-8 main" \
  && apt-get update \
  && apt-get -y install clang-8 clang-tools-8 build-essential pkg-config autoconf gnutls-dev sudo git python docker-ce-cli

RUN update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-8 30 \
  && update-alternatives --install /usr/bin/clang clang /usr/bin/clang-8 30

RUN GRPC_HEALTH_PROBE_VERSION=v0.3.6 && \
    curl -L https://github.com/grpc-ecosystem/grpc-health-probe/releases/download/${GRPC_HEALTH_PROBE_VERSION}/grpc_health_probe-linux-amd64 -o /usr/bin/grpc_health_probe && \
    chmod +x /usr/bin/grpc_health_probe

ENV GOPATH /go
RUN mkdir -p /go
WORKDIR /build

# ffmpeg builder image
FROM base as ffmpeg-builder

COPY ./install_ffmpeg.sh ./install_ffmpeg.sh
RUN ./install_ffmpeg.sh

# Builder image
FROM ffmpeg-builder as builder

ARG HIGHEST_CHAIN_TAG
ENV HIGHEST_CHAIN_TAG ${HIGHEST_CHAIN_TAG}

RUN GO111MODULE=on go get -v github.com/golangci/golangci-lint/cmd/golangci-lint@v1.25.0
RUN go get -v github.com/jstemmer/go-junit-report

ENV GOFLAGS "-mod=readonly"

COPY go.mod go.mod
COPY go.sum go.sum
RUN go mod download

COPY . .

RUN make livepeer livepeer_cli livepeer_bench livepeer_router

CMD ./upload_build.sh

# go-livepeer distributable image
FROM nvidia/cuda:10.1-base as livepeer

ENTRYPOINT ["/usr/bin/livepeer"]

# this is needed to access GPU inside Docker Swarm
ENV NVIDIA_DRIVER_CAPABILITIES=all

COPY --from=builder /build/livepeer /usr/bin/livepeer
COPY --from=builder /build/livepeer_cli /usr/bin/livepeer_cli
COPY --from=builder /build/livepeer_router /usr/bin/livepeer_router
COPY --from=builder /usr/bin/grpc_health_probe /usr/bin/grpc_health_probe